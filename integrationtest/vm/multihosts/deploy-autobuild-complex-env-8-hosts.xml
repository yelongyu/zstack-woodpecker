<?xml version="1.0" encoding="UTF-8"?>
<config>
  <!--basicConfig will set basic test environment, include where is install
        script, installation binary, database and rabbitmq information etc.-->
  <basicConfig>
  <!-- The following configurations are path in test machine. 
        zstackPkg is zstack all in one package tar.gz file.
        zstackInstallScript is the installation script, which could be 
    downloaded from zstack website or get from zstack-utility/installation/
        zstackInstallPath is the path zstackPkg will be installed. It should be
    carefully set. The contents in this folder will be deleted permanently in 
    testing. 
        zstackProperties is optional. It is zstack.properties. Tester could 
    assign special zstack.properties. If not providing this line, testing will
    just use zstack default property file. 
        testAgent is the woodpecker test agent tar.gz package. It will be widely
    used in woodpecker testing.
        db.admin is the database admin user. Usually it is root.
        db.username is the user who will operate zstack database. Usually it is
    zstack. 
        db.server_root_password is the root password for the database's host OS.
    woodpecker uses it to install and config database. 
        rabbitmq.password is the root password for rabbitmq's host OS. 
    woodpecker uses it to install and start rabbitmq-server

        This config file could be used to deploy zstack cloud environment by
    zstack-cli, after zstack server is started. The detailed information could
    be found in zstack-cli help manual.
  -->
    <zstackPkg>$zstackPkg</zstackPkg>
    <zstackInstallScript>$zstackInstallScript</zstackInstallScript>
    <zstackInstallPath>$zstackInstallPath</zstackInstallPath>
    <zstackProperties>$zstackPropertiesPath</zstackProperties>
    <testAgent>$zstackTestAgentPkgPath</testAgent>
    <db>
      <!-- Database server IP address or hostname -->
      <server>$DBServer</server>
      <admin>$DBAdminUser</admin>
      <adminPassword>$DBAdminPassword</adminPassword>
      <username>$DBUserName</username>
      <server_root_password>$hostPassword</server_root_password>
      <!-- <password>$DBPassword</password>
      <port>$DBPort</port> -->
    </db>
    <rabbitmq>
        <server>$rabbitmqServerIp</server>
        <password>$hostPassword</password>
    </rabbitmq>
  </basicConfig>
  
  <!--deployConfig define the zstack test infraastructure, including computer resource, network infrastructure etc. -->
  <deployerConfig xmlns="http://zstack.org/schema/zstack">
    <nodes description="Woodpecker will send zstack command to the 1st node. 
        multi nodes support real hosts or docker (if providing dockerImage and 
        it is found in `docker images`). "> 
      <node name="$node1Name" ip="$node1Ip"
        username="$nodeUserName" password="$nodePassword"
        description="The default node 1. It could be same as test machine."/>
      <!-- multi node setting
      <node name="$node2Name" dockerImage="$node2DockerImage" ip="$node2Ip" 
        username="$nodeUserName" password="$nodePassword"
        description="multi nodes have same catalinaHome as node 1"/>
      <node name="$node3Name" dockerImage="$node3DockerImage" ip="$node3Ip" 
        username="$nodeUserName" password="$nodePassword"
        description="multi nodes have same catalinaHome as node 1" />
      -->
    </nodes> 
  
    <instanceOfferings>
      <instanceOffering name="$instanceOfferingName_s"
        description="Test" 
        memoryCapacity="$instanceOfferingMemory_s" 
        cpuNum="$instanceOfferingCpuNum_s"
        />
      <virtualRouterOffering name="$virtualRouterOfferingName_s"
        memoryCapacity="$virtualRouterOfferingMemory_s" 
        cpuNum="$virtualRouterOfferingCpuNum_s" isDefault="true">
        <zoneRef>$zoneName</zoneRef>
        <managementL3NetworkRef>$l3PublicNetworkName</managementL3NetworkRef>
        <publicL3NetworkRef>$l3PublicNetworkName</publicL3NetworkRef>
        <imageRef>$virtualRouterImageName</imageRef>
      </virtualRouterOffering>
	  
      <virtualRouterOffering name="$virtualRouterOfferingName_s2"
        memoryCapacity="$virtualRouterOfferingMemory_s" 
        cpuNum="$virtualRouterOfferingCpuNum_s" isDefault="true">
        <zoneRef>$zoneName2</zoneRef>
        <managementL3NetworkRef>$l3PublicNetworkName2</managementL3NetworkRef>
        <publicL3NetworkRef>$l3PublicNetworkName2</publicL3NetworkRef>
        <imageRef>$virtualRouterImageName2</imageRef>
      </virtualRouterOffering>
    </instanceOfferings>
  
    <backupStorages>
      <imageStoreBackupStorage name="$sftpBackupStorageName"
        description="Test" url="$sftpBackupStorageUrl"
	username="$sftpBackupStorageUsername"
	password="$sftpBackupStoragePassword"
	hostname="$sftpBackupStorageHostname"
	port="$sftpBackupStoragePort"/>
      <cephBackupStorage name="$cephBackupStorageName"
        description="Test Ceph BS" 
        monUrls="$cephBackupStorageMonUrls" 
      />
      <xskycephBackupStorage name="$cephBackupStorageName2"
	poolName="$cephBackupStoragePoolName"
        description="Test" 
        monUrls="$cephBackupStorageMonUrls2" 
      />
    </backupStorages>
  
    <images>
      <image name="$imageName_s" description="Test Image1" 
        format="$rootImageFormat" url="$imageUrl_s" 
        mediaType="$rootMediaType"
        username="$imageUsername" password="$imagePassword">
        <backupStorageRef>$sftpBackupStorageName</backupStorageRef>
        <backupStorageRef>$cephBackupStorageName</backupStorageRef>
      </image>
      <image name="$virtualRouterImageName" 
        description="virtual router image" format="$rootImageFormat" 
        username="$vrImageUsername" password="$vrImagePassword"
        mediaType="$rootMediaType"
        hypervisorType='KVM' url="$virtualRouterImageUrl" system="True">
        <backupStorageRef>$sftpBackupStorageName</backupStorageRef>
      </image>
      <image name="$virtualRouterImageName2" 
        description="virtual router image" format="$rootImageFormat" 
        username="$vrImageUsername" password="$vrImagePassword"
        mediaType="$rootMediaType"
        hypervisorType='KVM' url="$virtualRouterImageUrl" system="True">
        <backupStorageRef>$cephBackupStorageName</backupStorageRef>
      </image>
      <image name="$imageName3" description="Test Image3" 
        format="$rootImageFormat" url="$imageUrl3" 
        mediaType="$rootMediaType"
        username="$imageUsername" password="$imagePassword">
        <backupStorageRef>$cephBackupStorageName2</backupStorageRef>
      </image>
    </images>
  
    <diskOfferings>
      <diskOffering name="$largeDiskOfferingName" 
        description="large Disk Offering" 
        diskSize="$largeDiskOfferingSize" />
  
      <diskOffering name="$mediumDiskOfferingName" 
        description="Medium Disk Offering" 
        diskSize="$mediumDiskOfferingSize" />
  
      <diskOffering name="$smallDiskOfferingName" 
        description="Small Disk Offering" 
        diskSize="$smallDiskOfferingSize" /> 
    </diskOfferings>
  
    <zones>
      <zone name="$zoneName" description="Test">
        <backupStorageRef>$sftpBackupStorageName</backupStorageRef>
        <primaryStorages>
	  <localPrimaryStorage name="$localPrimaryStorageName"
            description="Test Local Primary Storage"
            url="$localPrimaryStorageUrl" />
        </primaryStorages>
  
        <clusters>
          <cluster name="$clusterName" description="Test"
            hypervisorType="$clusterHypervisorType">
            <hosts>
              <host name="$hostName" description="Test" managementIp="$hostIp"
                username="$hostUsername" password="$hostPassword" addToComputationalNode="True"/>
              <host name="$hostName2" description="Test2" managementIp="$hostIp2"
                username="$hostUsername2" password="$hostPassword2" port="$hostPort2"/>
            </hosts>
            <primaryStorageRef>$localPrimaryStorageName</primaryStorageRef>
            <l2NetworkRef>$l2PublicNetworkName</l2NetworkRef>
          </cluster>

          <cluster name="$clusterName2" description="Test2"
            hypervisorType="$clusterHypervisorType2">
            <hosts>
              <host name="$hostName3" description="Test3" managementIp="$hostIp3"
                username="$hostUsername3" password="$hostPassword3" addToComputationalNode="True"/>
              <host name="$hostName4" description="Test4" managementIp="$hostIp4"
                username="$hostUsername4" password="$hostPassword4" port="$hostPort4"/>
            </hosts>
            <l2NetworkRef>$l2PublicNetworkName</l2NetworkRef>
          </cluster>
        </clusters>
 
  
        <l2Networks>
          <l2NoVlanNetwork name="$l2PublicNetworkName"
            description="Test" physicalInterface="$l2PublicNetworkInterface">
            <l3Networks>
              <l3BasicNetwork name="$l3PublicNetworkName" category="Public" description="Public Network">
                <ipRange name="$ipRangeName" description="Test"
                  startIp="$ipRangeStartIp" endIp="$ipRangeEndIp" gateway="$ipRangeGateway"
                  netmask="$ipRangeNetmask" />
                <dns>$DNSServer</dns>
              </l3BasicNetwork>
            </l3Networks>
          </l2NoVlanNetwork>
          
        </l2Networks>
      </zone>


      <zone name="$zoneName2" description="Test2">
        <backupStorageRef>$cephBackupStorageName</backupStorageRef>
        <backupStorageRef>$cephBackupStorageName2</backupStorageRef>
        <primaryStorages>
          <cephPrimaryMultipoolsStorage name="$cephPrimaryStorageName"
            description="Test Ceph PS" 
            monUrls="$cephPrimaryStorageMonUrls"
            poolPrefix="test-pool"
            poolNum="2"
          />
          <xskycephPrimaryStorage name="$cephPrimaryStorageName2"
            description="Test Ceph PS" 
            dataVolumePoolName="$cephPrimaryStorageDataVolumePoolName"
            rootVolumePoolName="$cephPrimaryStorageRootVolumePoolName"
            imageCachePoolName="$cephPrimaryStorageImageCachePoolName"
            monUrls="$cephPrimaryStorageMonUrls2" />
        </primaryStorages>
        <clusters>
          <cluster name="$clusterName3" description="Test3"
            hypervisorType="$clusterHypervisorType3">
            <hosts>
              <host name="$hostName5" description="Test5" managementIp="$hostIp5"
                username="$hostUsername5" password="$hostPassword5" addToComputationalNode="True"/>
              <host name="$hostName6" description="Test6" managementIp="$hostIp6"
                username="$hostUsername6" password="$hostPassword6" port="$hostPort6"/>
            </hosts>
            <primaryStorageRef>$cephPrimaryStorageName</primaryStorageRef>
            <l2NetworkRef>$l2PublicNetworkName2</l2NetworkRef>
          </cluster>

          <cluster name="$clusterName4" description="Test4"
            hypervisorType="$clusterHypervisorType4">
            <hosts>
              <host name="$hostName7" description="Test7" managementIp="$hostIp7"
                username="$hostUsername7" password="$hostPassword7" addToComputationalNode="True"/>
              <host name="$hostName8" description="Test8" managementIp="$hostIp8"
                username="$hostUsername8" password="$hostPassword8" port="$hostPort8"/>
            </hosts>
            <primaryStorageRef>$cephPrimaryStorageName2</primaryStorageRef>
            <l2NetworkRef>$l2PublicNetworkName2</l2NetworkRef>
          </cluster>
        </clusters>
 
  
        <l2Networks>
          <l2NoVlanNetwork name="$l2PublicNetworkName2"
            description="Test" physicalInterface="$l2PublicNetworkInterface">
            <l3Networks>
              <l3BasicNetwork name="$l3PublicNetworkName2" category="Public" description="Public Network">
                <ipRange name="$ipRangeName2" description="Test"
                  startIp="$ipRangeStartIp2" endIp="$ipRangeEndIp2" gateway="$ipRangeGateway2"
                  netmask="$ipRangeNetmask2" />
				<!--Maybe, the ipRange here need to be modified later. Otherwise conflict with zone1.-->
                <dns>$DNSServer</dns>
              </l3BasicNetwork>
            </l3Networks>
          </l2NoVlanNetwork>
          
        </l2Networks>
      </zone>

    </zones>
  </deployerConfig>
</config>
